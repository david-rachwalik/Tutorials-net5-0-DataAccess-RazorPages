# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

# https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/dotnet-core

trigger:
- master

variables:
  tag: '$(Build.BuildId)'
  dotnetRuntimeVersion: "5.0.x"
  projectName: "ContosoUniversity"
  dbContext: "SchoolContext"

stages:
- stage: Build
  pool:
    vmImage: "ubuntu-latest"
  variables:
    solution: "**/*.sln"
    buildPlatform: "AnyCPU"
    buildConfiguration: "Release"
    scriptName: "migrations.sql"
  jobs:
  # Each job runs on its own machine; need installed tools to persist across all steps
  - job: Build
    steps:
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer
    - task: UseDotNet@2
      displayName: "Install .NET SDK"
      inputs:
        version: "$(dotnetRuntimeVersion)"
        packageType: runtime
    
    # Omit '--version' here and let SDK determine EF package
    - script: dotnet tool install --global dotnet-ef
      displayName: "Install .NET EF"

    # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/nuget
    - task: NuGetToolInstaller@1
      displayName: "Install NuGet"

    # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/package/nuget
    - task: NuGetCommand@2
      displayName: "Restore NuGet package dependencies"
      inputs:
        restoreSolution: "$(solution)"

        
    # -------- Build Steps --------
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli
    - task: DotNetCoreCLI@2
      displayName: "Build .NET: $(buildConfiguration)"
      inputs:
        command: "build"
        arguments: "--configuration $(buildConfiguration)"

    # Build Restored /home/vsts/work/1/s/Test-PipelineArmTemplates.Web/Test-PipelineArmTemplates.Web.csproj (in 152 ms).
    # Test-PipelineArmTemplates.Web -> /home/vsts/work/1/s/Test-PipelineArmTemplates.Web/bin/Release/netcoreapp3.1/Test-PipelineArmTemplates.Web.dll
    # Test-PipelineArmTemplates.Web -> /home/vsts/work/1/s/Test-PipelineArmTemplates.Web/bin/Release/netcoreapp3.1/Test-PipelineArmTemplates.Web.Views.dll


  
    - script: echo This is pipeline $(System.DefinitionId)      # 8
    - bash: pwd                                                 # /home/vsts/work/1/s       # same as $(System.DefaultWorkingDirectory)
    # https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables
    - bash: "ls -la $(Agent.BuildDirectory)"                    # /home/vsts/work/1         # returned TestResults, a, b, s
    - bash: "ls -la $(Build.ArtifactStagingDirectory)"          # /home/vsts/work/1/a
    - bash: "ls -la $(Build.SourcesDirectory)"                  # /home/vsts/work/1/s
    


    # - script: >-
    #     dotnet ef migrations script
    #     --startup-project $(Build.SourcesDirectory)
    #     --context $(dbContext)
    #     --configuration $(buildConfiguration)
    #     --output $(Build.ArtifactStagingDirectory)/sql/$(scriptName)
    #     --idempotent
      
    # https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet
    - script: >-
        dotnet ef migrations script
        --project $(projectName)/$(projectName).csproj
        --startup-project $(projectName)/$(projectName).csproj
        --output $(Build.ArtifactStagingDirectory)/sql/$(scriptName)
        --idempotent
      # --runtime version: "$(dotnetRuntimeVersion)"
      displayName: "Generate SQL migration script"

      # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/command-line
      # workingDirectory: "$(Agent.BuildDirectory)/s/Test-PipelineArmTemplates.Web/bin/Release/netcoreapp3.1"
      # workingDirectory: "$(Build.SourcesDirectory)/Test-PipelineArmTemplates.Web"
      # workingDirectory: "$(Build.SourcesDirectory)/Test-PipelineArmTemplates.Web"
      # *ERROR: Test-PipelineArmTemplates.Web must reference 'Microsoft.EntityFrameworkCore.Design' package

      
    - bash: "ls -la $(Agent.BuildDirectory)"                    # /home/vsts/work/1         # returned TestResults, a, b, s
    - bash: "ls -la $(Build.ArtifactStagingDirectory)"          # /home/vsts/work/1/a
    - bash: "ls -la $(Build.SourcesDirectory)"                  # /home/vsts/work/1/s

    
    # -------- Test Steps --------
    - task: DotNetCoreCLI@2
      displayName: "dotnet test $(buildConfiguration)"
      inputs:
        command: test
        projects: "**/*Tests/*.csproj"
        arguments: "--configuration $(buildConfiguration)"


        
    # -------- Publish Steps --------
    # Provides zip file for web app service
    - task: DotNetCoreCLI@2
      displayName: "Stage build output"
      inputs:
        command: publish
        publishWebProjects: True
        arguments: "--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)"
        zipAfterPublish: True

    # Provides dacpac file for database
    - task: CopyFiles@2
      displayName: "Copy dacpac files to: $(Build.ArtifactStagingDirectory)"
      inputs:
        sourceFolder: "$(Build.SourcesDirectory)"
        contents: "**\\bin\\$(buildConfiguration)\\**"
        targetFolder: "$(Build.ArtifactStagingDirectory)"
        
    # Provides pipeline file
    - task: CopyFiles@2
      displayName: "Copy pipeline files to: $(Build.ArtifactStagingDirectory)"
      inputs:
        sourceFolder: "$(Build.SourcesDirectory)"
        contents: "**\\ArmTemplates\\**\\azuredeploy*.json"
        targetFolder: "$(Build.ArtifactStagingDirectory)"

    - task: PublishBuildArtifacts@1
      displayName: "Publish build artifact: drop"
      inputs:
        pathtoPublish: "$(Build.ArtifactStagingDirectory)" 
        artifactName: "drop"

  
    - bash: "ls -la $(Agent.BuildDirectory)"                    # /home/vsts/work/1         # returned TestResults, a, b, s
    - bash: "ls -la $(Build.ArtifactStagingDirectory)"          # /home/vsts/work/1/a
    - bash: "ls -la $(Build.SourcesDirectory)"                  # /home/vsts/work/1/s



#- stage: Provision
#  displayName: 'Terraforming on Azure'
#  dependsOn: Build
#  pool:
#    vmImage: "ubuntu-latest"
#  jobs:
#  - job: Provision
#    displayName: 'Provision Container Instance'
#    variables:
#    - group: TerraformEnvVars
#    steps:
#    # - bash: "pwd" # /home/vsts/work/1/s
#    # - bash: "ls"
#    # - bash: "terraform -version" # Terraform v1.0.8
#    - script: |
#        set -e
#        terraform init -input=false
#        terraform apply -input=false -auto-approve
#      name: 'RunTerraform'
#      displayName: 'Run Terraform'
#      # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/command-line?view=azure-devops#arguments
#      workingDirectory: $(projectName)/terraform/
#      env:
#        ARM_CLIENT_ID: $(ARM_CLIENT_ID)
#        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
#        ARM_TENANT_ID: $(ARM_TENANT_ID)
#        ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
#        TF_VAR_imagebuild: $(tag)
